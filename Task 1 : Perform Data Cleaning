{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOYHHbup3ymYkUqkipa1xHy"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Task 1 : Perform Data Cleaning**"
      ],
      "metadata": {
        "id": "DpUsiYjCsOnQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "BSV-LgcusrwP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Importing the Datasets**"
      ],
      "metadata": {
        "id": "K-PH4uKoul3D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Here the data has been split into two groups in Titanic Dataset : training set(train.csv) and test set(test.csv)\n",
        "train_data = pd.read_csv(\"train.csv\")\n",
        "train_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "X3tVgg91vgV7",
        "outputId": "968aaaed-4015-44df-a341-1a55a8c81ab9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Cabin Embarked  \n",
              "0        0         A/5 21171   7.2500   NaN        S  \n",
              "1        0          PC 17599  71.2833   C85        C  \n",
              "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3        0            113803  53.1000  C123        S  \n",
              "4        0            373450   8.0500   NaN        S  \n",
              "..     ...               ...      ...   ...      ...  \n",
              "886      0            211536  13.0000   NaN        S  \n",
              "887      0            112053  30.0000   B42        S  \n",
              "888      2        W./C. 6607  23.4500   NaN        S  \n",
              "889      0            111369  30.0000  C148        C  \n",
              "890      0            370376   7.7500   NaN        Q  \n",
              "\n",
              "[891 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22b4356d-423c-4e6f-a2cd-86826a2b8a37\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>B42</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C148</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>891 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22b4356d-423c-4e6f-a2cd-86826a2b8a37')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22b4356d-423c-4e6f-a2cd-86826a2b8a37 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22b4356d-423c-4e6f-a2cd-86826a2b8a37');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5e86875f-1270-4e09-8a45-31b8f60371a2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5e86875f-1270-4e09-8a45-31b8f60371a2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5e86875f-1270-4e09-8a45-31b8f60371a2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b164b1aa-1d23-4493-b8b7-11aee37d6dea\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b164b1aa-1d23-4493-b8b7-11aee37d6dea button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('train_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_data",
              "summary": "{\n  \"name\": \"train_data\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334042,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.6934285971809,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data = pd.read_csv(\"test.csv\")\n",
        "test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "fDmS_Gdmw9XG",
        "outputId": "feb864b7-df77-42a6-88da-ea36837e13cd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Pclass                                          Name  \\\n",
              "0            892       3                              Kelly, Mr. James   \n",
              "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
              "2            894       2                     Myles, Mr. Thomas Francis   \n",
              "3            895       3                              Wirz, Mr. Albert   \n",
              "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
              "..           ...     ...                                           ...   \n",
              "413         1305       3                            Spector, Mr. Woolf   \n",
              "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
              "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
              "416         1308       3                           Ware, Mr. Frederick   \n",
              "417         1309       3                      Peter, Master. Michael J   \n",
              "\n",
              "        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
              "0      male  34.5      0      0              330911    7.8292   NaN        Q  \n",
              "1    female  47.0      1      0              363272    7.0000   NaN        S  \n",
              "2      male  62.0      0      0              240276    9.6875   NaN        Q  \n",
              "3      male  27.0      0      0              315154    8.6625   NaN        S  \n",
              "4    female  22.0      1      1             3101298   12.2875   NaN        S  \n",
              "..      ...   ...    ...    ...                 ...       ...   ...      ...  \n",
              "413    male   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n",
              "414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n",
              "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
              "416    male   NaN      0      0              359309    8.0500   NaN        S  \n",
              "417    male   NaN      1      1                2668   22.3583   NaN        C  \n",
              "\n",
              "[418 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a50aca76-41ff-4edd-b04a-cd35c98dc580\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>male</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>1305</td>\n",
              "      <td>3</td>\n",
              "      <td>Spector, Mr. Woolf</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>A.5. 3236</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>414</th>\n",
              "      <td>1306</td>\n",
              "      <td>1</td>\n",
              "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
              "      <td>female</td>\n",
              "      <td>39.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17758</td>\n",
              "      <td>108.9000</td>\n",
              "      <td>C105</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>415</th>\n",
              "      <td>1307</td>\n",
              "      <td>3</td>\n",
              "      <td>Saether, Mr. Simon Sivertsen</td>\n",
              "      <td>male</td>\n",
              "      <td>38.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>SOTON/O.Q. 3101262</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>1308</td>\n",
              "      <td>3</td>\n",
              "      <td>Ware, Mr. Frederick</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>359309</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>417</th>\n",
              "      <td>1309</td>\n",
              "      <td>3</td>\n",
              "      <td>Peter, Master. Michael J</td>\n",
              "      <td>male</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2668</td>\n",
              "      <td>22.3583</td>\n",
              "      <td>NaN</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>418 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a50aca76-41ff-4edd-b04a-cd35c98dc580')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a50aca76-41ff-4edd-b04a-cd35c98dc580 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a50aca76-41ff-4edd-b04a-cd35c98dc580');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7527c743-942c-4176-8001-6d8f3e90e307\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7527c743-942c-4176-8001-6d8f3e90e307')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7527c743-942c-4176-8001-6d8f3e90e307 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3ebe0607-2a5f-45c0-8a6e-4b32f57a5684\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3ebe0607-2a5f-45c0-8a6e-4b32f57a5684 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_data",
              "summary": "{\n  \"name\": \"test_data\",\n  \"rows\": 418,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120,\n        \"min\": 892,\n        \"max\": 1309,\n        \"num_unique_values\": 418,\n        \"samples\": [\n          1213,\n          1216,\n          1280\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 418,\n        \"samples\": [\n          \"Krekorian, Mr. Neshan\",\n          \"Kreuchen, Miss. Emilie\",\n          \"Canavan, Mr. Patrick\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.181209235624422,\n        \"min\": 0.17,\n        \"max\": 76.0,\n        \"num_unique_values\": 79,\n        \"samples\": [\n          10.0,\n          34.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 363,\n        \"samples\": [\n          \"2673\",\n          \"W./C. 6607\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.907576179973844,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 169,\n        \"samples\": [\n          41.5792,\n          57.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 76,\n        \"samples\": [\n          \"A21\",\n          \"E45\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Missing Values in Training set**"
      ],
      "metadata": {
        "id": "wB5zAfIQxXS1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***1. Identifying Missing Values***"
      ],
      "metadata": {
        "id": "Ip9vsnYfyrTk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Missing Values in Training dataset: \\n\")\n",
        "print(train_data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9AVA3O7dADtG",
        "outputId": "b24b276a-557b-4f15-ff4a-860c64b53793"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing Values in Training dataset: \n",
            "\n",
            "PassengerId      0\n",
            "Survived         0\n",
            "Pclass           0\n",
            "Name             0\n",
            "Sex              0\n",
            "Age            177\n",
            "SibSp            0\n",
            "Parch            0\n",
            "Ticket           0\n",
            "Fare             0\n",
            "Cabin          687\n",
            "Embarked         2\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***2. Handling Missing Values in \"Age\", \"Cabin\", \"Embarked\" columns***"
      ],
      "metadata": {
        "id": "9T2es-TKAbK6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Replacing missing values in \"Age\" column of DataFrame \"train_data\" with Median value of \"Age\" column\n",
        "#fillna() method is used to fill missing values\n",
        "\n",
        "train_data[\"Age\"].fillna(train_data[\"Age\"].median(), inplace = True)\n",
        "\n",
        "#drop \"Cabin\" column since it is not crucial for analysis as it has large number of missing values and filling in these missing values might not be reliable.\n",
        "\n",
        "train_data.drop(\"Cabin\", axis=1, inplace = True)\n",
        "\n",
        "#drop rows having missing values in \"Embarked\" column\n",
        "#dropna() method is used to drop rows with missing values\n",
        "\n",
        "train_data.dropna(subset=[\"Embarked\"], inplace = True)"
      ],
      "metadata": {
        "id": "S-eOMpFb4w1D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Training Dataset after handling the missing values: \\n\")\n",
        "print(train_data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jepqaqnkD9ug",
        "outputId": "af8fb583-2bf6-486d-923a-8fa987097b54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Dataset after handling the missing values: \n",
            "\n",
            "PassengerId    0\n",
            "Survived       0\n",
            "Pclass         0\n",
            "Name           0\n",
            "Sex            0\n",
            "Age            0\n",
            "SibSp          0\n",
            "Parch          0\n",
            "Ticket         0\n",
            "Fare           0\n",
            "Embarked       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Training Dataset after removing the missing values:\\n\")\n",
        "train_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "Eivvw4MeEX4A",
        "outputId": "e9035fc9-e45b-4b0a-bf4f-e15750635301"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Dataset after removing the missing values:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "1              2         1       1   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "..           ...       ...     ...   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "888          889         0       3   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                                  Name     Sex   Age  SibSp  \\\n",
              "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                             Allen, Mr. William Henry    male  35.0      0   \n",
              "..                                                 ...     ...   ...    ...   \n",
              "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
              "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
              "888           Johnston, Miss. Catherine Helen \"Carrie\"  female  28.0      1   \n",
              "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
              "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
              "\n",
              "     Parch            Ticket     Fare Embarked  \n",
              "0        0         A/5 21171   7.2500        S  \n",
              "1        0          PC 17599  71.2833        C  \n",
              "2        0  STON/O2. 3101282   7.9250        S  \n",
              "3        0            113803  53.1000        S  \n",
              "4        0            373450   8.0500        S  \n",
              "..     ...               ...      ...      ...  \n",
              "886      0            211536  13.0000        S  \n",
              "887      0            112053  30.0000        S  \n",
              "888      2        W./C. 6607  23.4500        S  \n",
              "889      0            111369  30.0000        C  \n",
              "890      0            370376   7.7500        Q  \n",
              "\n",
              "[889 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf735136-4ac8-42d4-aed7-133466304a92\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>888</th>\n",
              "      <td>889</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
              "      <td>female</td>\n",
              "      <td>28.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>W./C. 6607</td>\n",
              "      <td>23.4500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>889 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf735136-4ac8-42d4-aed7-133466304a92')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cf735136-4ac8-42d4-aed7-133466304a92 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cf735136-4ac8-42d4-aed7-133466304a92');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-743902a8-7ff3-46f9-9115-220402428df6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-743902a8-7ff3-46f9-9115-220402428df6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-743902a8-7ff3-46f9-9115-220402428df6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ad3589f5-4bbf-4caa-b446-a2d311a9956c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('train_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ad3589f5-4bbf-4caa-b446-a2d311a9956c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('train_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train_data",
              "summary": "{\n  \"name\": \"train_data\",\n  \"rows\": 889,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 256,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 889,\n        \"samples\": [\n          282,\n          436,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 889,\n        \"samples\": [\n          \"Olsson, Mr. Nils Johan Goransson\",\n          \"Carter, Miss. Lucile Polk\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.984932293690775,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 680,\n        \"samples\": [\n          \"11774\",\n          \"29105\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.697504316707956,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 247,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Outliers in Training Set**"
      ],
      "metadata": {
        "id": "8pZ6wFIlHZW7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***1. Identifying Outliers for Numerical columns in Training set***"
      ],
      "metadata": {
        "id": "sjkzcfbwHg2J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Numerical columns of training set\n",
        "\n",
        "numerical_cols = ['PassengerId', 'Age', 'Fare', 'SibSp', 'Parch']\n",
        "\n",
        "#Defining colors for the box plots\n",
        "\n",
        "colors = ['green', 'yellow', 'purple', 'blue', 'grey']\n",
        "\n",
        "#Creating box plots for each numerical column\n",
        "\n",
        "for col, color in zip(numerical_cols, colors):\n",
        "  plt.figure(figsize=(8, 5))\n",
        "  sns.boxplot(x=train_data[col], color=color)\n",
        "  plt.title(f'Boxplot of {col}')\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7HecajP70IMz",
        "outputId": "95508cb8-94ce-4341-e3b1-f1e3e69b7036"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***2. Identifying Outliers for Categorical Columns in Training Set***"
      ],
      "metadata": {
        "id": "oLWk57W14bbI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Categories with very low or very high frequency than the other categories can be considered as outliers in the categorical data\n",
        "#Name and Ticket columns are not considered as they have many unique values and making their visualization can be impractical in count plots\n",
        "#Categorical columns of the Training set\n",
        "\n",
        "categorical_cols = ['Embarked', 'Pclass', 'Sex', 'Survived']\n",
        "\n",
        "#Defining colors for the count plots\n",
        "\n",
        "colors = ['teal', 'pink', 'purple', 'yellow']\n",
        "\n",
        "#Creating count plots for each categorical column\n",
        "\n",
        "for col, color in zip(categorical_cols, colors):\n",
        "  plt.figure(figsize=(8, 5))\n",
        "  sns.countplot(x=train_data[col], color=color)\n",
        "  plt.title(f'Countplot of {col}')\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "PDgbH7cJ6vfO",
        "outputId": "4023f29f-29e7-40ac-bb10-572466282ff6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***3. Handling Outliers in Training Set using IQR(Interquartile Range) method***"
      ],
      "metadata": {
        "id": "mXXp1dfv6doO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Numerical columns of Training Set\n",
        "\n",
        "numerical_cols = ['Age', 'Fare', 'SibSp', 'Parch']\n",
        "\n",
        "#Calculating the IQR for each numerical column\n",
        "#Q1 represents first quartile and Q3 represents third quartile\n",
        "\n",
        "Q1 = train_data[numerical_cols].quantile(0.25)\n",
        "Q3 = train_data[numerical_cols].quantile(0.75)\n",
        "IQR = Q3-Q1\n",
        "\n",
        "#lower and upper bounds for the outliers\n",
        "#data points that falls below lower bound and exceeds upper bounds is said to be an outlier\n",
        "\n",
        "lower_bound = Q1-1.5*IQR\n",
        "upper_bound = Q3+1.5*IQR\n",
        "\n",
        "# Removing outliers from numerical columns and displaying the cleaned training set\n",
        "\n",
        "print(\"Cleaned Training Set:\\n\")\n",
        "for col in numerical_cols:\n",
        "  cleaned_train_data = train_data[(train_data[col] >= lower_bound[col]) & (train_data[col] <= upper_bound[col])]\n",
        "cleaned_train_data"
      ],
      "metadata": {
        "id": "GiTrkRhRDjE5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "outputId": "4daba4d0-d3d5-4273-862b-83020ee22bd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cleaned Training Set:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Survived  Pclass  \\\n",
              "0              1         0       3   \n",
              "2              3         1       3   \n",
              "3              4         1       1   \n",
              "4              5         0       3   \n",
              "5              6         0       3   \n",
              "..           ...       ...     ...   \n",
              "884          885         0       3   \n",
              "886          887         0       2   \n",
              "887          888         1       1   \n",
              "889          890         1       1   \n",
              "890          891         0       3   \n",
              "\n",
              "                                             Name     Sex   Age  SibSp  Parch  \\\n",
              "0                         Braund, Mr. Owen Harris    male  22.0      1      0   \n",
              "2                          Heikkinen, Miss. Laina  female  26.0      0      0   \n",
              "3    Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1      0   \n",
              "4                        Allen, Mr. William Henry    male  35.0      0      0   \n",
              "5                                Moran, Mr. James    male  28.0      0      0   \n",
              "..                                            ...     ...   ...    ...    ...   \n",
              "884                        Sutehall, Mr. Henry Jr    male  25.0      0      0   \n",
              "886                         Montvila, Rev. Juozas    male  27.0      0      0   \n",
              "887                  Graham, Miss. Margaret Edith  female  19.0      0      0   \n",
              "889                         Behr, Mr. Karl Howell    male  26.0      0      0   \n",
              "890                           Dooley, Mr. Patrick    male  32.0      0      0   \n",
              "\n",
              "               Ticket     Fare Embarked  \n",
              "0           A/5 21171   7.2500        S  \n",
              "2    STON/O2. 3101282   7.9250        S  \n",
              "3              113803  53.1000        S  \n",
              "4              373450   8.0500        S  \n",
              "5              330877   8.4583        Q  \n",
              "..                ...      ...      ...  \n",
              "884   SOTON/OQ 392076   7.0500        S  \n",
              "886            211536  13.0000        S  \n",
              "887            112053  30.0000        S  \n",
              "889            111369  30.0000        C  \n",
              "890            370376   7.7500        Q  \n",
              "\n",
              "[577 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-68449131-6115-43ed-bd7b-d3682c06c483\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Moran, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330877</td>\n",
              "      <td>8.4583</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>884</th>\n",
              "      <td>885</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Sutehall, Mr. Henry Jr</td>\n",
              "      <td>male</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>SOTON/OQ 392076</td>\n",
              "      <td>7.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>886</th>\n",
              "      <td>887</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>Montvila, Rev. Juozas</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>211536</td>\n",
              "      <td>13.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>887</th>\n",
              "      <td>888</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Graham, Miss. Margaret Edith</td>\n",
              "      <td>female</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>112053</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>889</th>\n",
              "      <td>890</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Behr, Mr. Karl Howell</td>\n",
              "      <td>male</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>111369</td>\n",
              "      <td>30.0000</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>890</th>\n",
              "      <td>891</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Dooley, Mr. Patrick</td>\n",
              "      <td>male</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>370376</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>577 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68449131-6115-43ed-bd7b-d3682c06c483')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-68449131-6115-43ed-bd7b-d3682c06c483 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-68449131-6115-43ed-bd7b-d3682c06c483');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8070470a-efbc-4799-8739-0708435f910e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8070470a-efbc-4799-8739-0708435f910e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8070470a-efbc-4799-8739-0708435f910e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_04ec8508-5934-485a-8186-52732407d0d4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cleaned_train_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_04ec8508-5934-485a-8186-52732407d0d4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cleaned_train_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cleaned_train_data",
              "summary": "{\n  \"name\": \"cleaned_train_data\",\n  \"rows\": 577,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 259,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 577,\n        \"samples\": [\n          188,\n          613,\n          798\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 577,\n        \"samples\": [\n          \"Romaine, Mr. Charles Hallace (\\\"Mr C Rolmane\\\")\",\n          \"Murphy, Miss. Margaret Jane\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.551663229988272,\n        \"min\": 5.0,\n        \"max\": 54.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          45.0,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 527,\n        \"samples\": [\n          \"226875\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.606520864552754,\n        \"min\": 0.0,\n        \"max\": 61.175,\n        \"num_unique_values\": 151,\n        \"samples\": [\n          23.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Missing Values in Test Set***"
      ],
      "metadata": {
        "id": "nbhD6J38ArLQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **1. Identifying Missing Values**"
      ],
      "metadata": {
        "id": "ZjscpciPFpwT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Missing Values in Test dataset: \\n\")\n",
        "print(test_data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rAqnIi0SF5CR",
        "outputId": "b0d3926c-36f1-459b-98a4-ae78bf6055cc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing Values in Test dataset: \n",
            "\n",
            "PassengerId      0\n",
            "Pclass           0\n",
            "Name             0\n",
            "Sex              0\n",
            "Age             86\n",
            "SibSp            0\n",
            "Parch            0\n",
            "Ticket           0\n",
            "Fare             1\n",
            "Cabin          327\n",
            "Embarked         0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **2. Handling Missing Values in \"Age\", \"Fare\" and \"Cabin\" Columns**"
      ],
      "metadata": {
        "id": "pZQWgBLcGhtG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Replacing missing values in \"Age\" column of DataFrame \"test_data\" with Median value of \"Age\" column\n",
        "#fillna() method is used to fill missing values\n",
        "\n",
        "test_data[\"Age\"].fillna(test_data[\"Age\"].median(), inplace = True)\n",
        "\n",
        "#drop \"Cabin\" column since it is not crucial for analysis as it has large number of missing values and filling in these missing values might not be reliable.\n",
        "\n",
        "test_data.drop(\"Cabin\", axis=1, inplace = True)\n",
        "\n",
        "#drop rows having missing values in \"Fare\" column\n",
        "#dropna() method is used to drop rows with missing values\n",
        "\n",
        "test_data.dropna(subset=[\"Fare\"], inplace = True)"
      ],
      "metadata": {
        "id": "zULSNqGdHAVk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Test Dataset after handling the missing values: \\n\")\n",
        "print(test_data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FZZSUSXXHwQE",
        "outputId": "8074d90c-2275-42bd-b5ea-fd9ffa347b48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Dataset after handling the missing values: \n",
            "\n",
            "PassengerId    0\n",
            "Pclass         0\n",
            "Name           0\n",
            "Sex            0\n",
            "Age            0\n",
            "SibSp          0\n",
            "Parch          0\n",
            "Ticket         0\n",
            "Fare           0\n",
            "Embarked       0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Test Dataset after removing the missing values:\\n\")\n",
        "test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "FnibHg3NKup2",
        "outputId": "2b4bb60c-8c2b-4d99-f987-5f85e0075eaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Dataset after removing the missing values:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Pclass                                          Name  \\\n",
              "0            892       3                              Kelly, Mr. James   \n",
              "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
              "2            894       2                     Myles, Mr. Thomas Francis   \n",
              "3            895       3                              Wirz, Mr. Albert   \n",
              "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
              "..           ...     ...                                           ...   \n",
              "413         1305       3                            Spector, Mr. Woolf   \n",
              "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
              "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
              "416         1308       3                           Ware, Mr. Frederick   \n",
              "417         1309       3                      Peter, Master. Michael J   \n",
              "\n",
              "        Sex   Age  SibSp  Parch              Ticket      Fare Embarked  \n",
              "0      male  34.5      0      0              330911    7.8292        Q  \n",
              "1    female  47.0      1      0              363272    7.0000        S  \n",
              "2      male  62.0      0      0              240276    9.6875        Q  \n",
              "3      male  27.0      0      0              315154    8.6625        S  \n",
              "4    female  22.0      1      1             3101298   12.2875        S  \n",
              "..      ...   ...    ...    ...                 ...       ...      ...  \n",
              "413    male  27.0      0      0           A.5. 3236    8.0500        S  \n",
              "414  female  39.0      0      0            PC 17758  108.9000        C  \n",
              "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500        S  \n",
              "416    male  27.0      0      0              359309    8.0500        S  \n",
              "417    male  27.0      1      1                2668   22.3583        C  \n",
              "\n",
              "[417 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f86495ee-a911-4500-8b74-5e429244f1f2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>894</td>\n",
              "      <td>2</td>\n",
              "      <td>Myles, Mr. Thomas Francis</td>\n",
              "      <td>male</td>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>240276</td>\n",
              "      <td>9.6875</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>896</td>\n",
              "      <td>3</td>\n",
              "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
              "      <td>female</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3101298</td>\n",
              "      <td>12.2875</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>1305</td>\n",
              "      <td>3</td>\n",
              "      <td>Spector, Mr. Woolf</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>A.5. 3236</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>414</th>\n",
              "      <td>1306</td>\n",
              "      <td>1</td>\n",
              "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
              "      <td>female</td>\n",
              "      <td>39.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17758</td>\n",
              "      <td>108.9000</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>415</th>\n",
              "      <td>1307</td>\n",
              "      <td>3</td>\n",
              "      <td>Saether, Mr. Simon Sivertsen</td>\n",
              "      <td>male</td>\n",
              "      <td>38.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>SOTON/O.Q. 3101262</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>1308</td>\n",
              "      <td>3</td>\n",
              "      <td>Ware, Mr. Frederick</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>359309</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>417</th>\n",
              "      <td>1309</td>\n",
              "      <td>3</td>\n",
              "      <td>Peter, Master. Michael J</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2668</td>\n",
              "      <td>22.3583</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>417 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f86495ee-a911-4500-8b74-5e429244f1f2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f86495ee-a911-4500-8b74-5e429244f1f2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f86495ee-a911-4500-8b74-5e429244f1f2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b59b0eb5-e93a-46d2-88b3-de4ee0f4c91d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b59b0eb5-e93a-46d2-88b3-de4ee0f4c91d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b59b0eb5-e93a-46d2-88b3-de4ee0f4c91d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_0d86e5c2-3046-4070-abe5-b52da8f75040\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0d86e5c2-3046-4070-abe5-b52da8f75040 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_data",
              "summary": "{\n  \"name\": \"test_data\",\n  \"rows\": 417,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120,\n        \"min\": 892,\n        \"max\": 1309,\n        \"num_unique_values\": 417,\n        \"samples\": [\n          1045,\n          1290,\n          1304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 417,\n        \"samples\": [\n          \"Klasen, Mrs. (Hulda Kristina Eugenia Lofqvist)\",\n          \"Larsson-Rondberg, Mr. Edvard A\",\n          \"Henriksson, Miss. Jenny Lovisa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.628257501637753,\n        \"min\": 0.17,\n        \"max\": 76.0,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          13.0,\n          34.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 362,\n        \"samples\": [\n          \"29750\",\n          \"W./C. 6607\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 55.907576179973844,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 169,\n        \"samples\": [\n          41.5792,\n          57.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\",\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Outliers in Test Set**"
      ],
      "metadata": {
        "id": "vUXuTd-yMKi1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **1. Identifying Outliers for Numerical columns in Test set**"
      ],
      "metadata": {
        "id": "mOwbfZujMRSa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Numerical Columns of Test Set\n",
        "\n",
        "\n",
        "numerical_cols = ['PassengerId', 'Age', 'Fare', 'SibSp', 'Parch']\n",
        "\n",
        "#Defining colors for box plots\n",
        "\n",
        "colors = ['skyblue', 'magenta', 'lightgreen', 'orange', 'grey']\n",
        "\n",
        "#Creating box plots for each numerical columns\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "for col, color in zip(numerical_cols, colors):\n",
        "  sns.boxplot(x=test_data[col], color=color)\n",
        "  plt.title(f'Boxplot of {col}')\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "XMptGGRlTbWm",
        "outputId": "8d8dc161-f6da-4219-8819-00e63dd4514f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAggAAAHHCAYAAADaqqCfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAqTklEQVR4nO3deXRUVYLH8V9VQmUlG5CEQEAiSwBZHJSICAEBIQjoTMv0IB4WcaZVGMXB7lFEWWSgbXtUtHscT9sSu104DeMCsm8BdUBsJBgIILLIngCBJARISOrOH3TepLgBQsgK3885dSSv3nt13y3K+lJVr+IyxhgBAACU4a7tAQAAgLqHQAAAABYCAQAAWAgEAABgIRAAAICFQAAAABYCAQAAWAgEAABgIRAAAICFQABuIC6XS9OmTavtYfj49ttvdffddyskJEQul0vp6em1PSQAFUAgABWQmpoql8vlc4mOjlbfvn21dOnS2h7edcvMzNS0adO0f//+Kt3vhQsXNHz4cOXk5Oj111/Xn//8Z7Vs2bLcddPS0qw5Lr380z/9U5WOC8DV+df2AID6ZMaMGWrVqpWMMcrKylJqaqoGDx6sRYsWaciQIbU9vErLzMzU9OnT1adPH91yyy1Vtt89e/bop59+0h/+8Ac99thjFdrmqaee0p133umzrCrHBKBiCATgGqSkpOiOO+5wfh43bpxiYmL08ccf1+tAqC7Z2dmSpIiIiApv06tXLz300ENVOo7z58/L4/HI7eZFU6CieLQA1yEiIkJBQUHy9/dt7YKCAk2aNEnx8fEKCAhQu3bt9Nvf/lalvzz13LlzSkxMVGJios6dO+dsl5OTo6ZNm+ruu+9WSUmJJGnMmDEKDQ3V3r17NXDgQIWEhCguLk4zZsxQRX4Z65YtW5SSkqKwsDCFhoaqX79+2rhxo3N9amqqhg8fLknq27ev87J+WlraFfe7Zs0a9erVSyEhIYqIiNADDzygHTt2ONePGTNGycnJkqThw4fL5XKpT58+Vx3v5eTk5OjZZ59Vp06dFBoaqrCwMKWkpGjr1q0+65W+VTFv3jxNmTJFzZo1U3BwsPLy8iRJ33zzjQYNGqTw8HAFBwcrOTlZX3/9daXHBdyoeAUBuAa5ubk6ceKEjDHKzs7WW2+9pTNnzuiRRx5x1jHGaNiwYVq7dq3GjRunrl27avny5frlL3+pw4cP6/XXX1dQUJDef/999ezZUy+88IJee+01SdL48eOVm5ur1NRU+fn5OfssKSnRoEGDdNddd+k3v/mNli1bpqlTp6q4uFgzZsy47Hi3b9+uXr16KSwsTL/61a/UoEEDvfPOO+rTp4/WrVunpKQk9e7dW0899ZTefPNNTZ48We3bt5ck57/lWbVqlVJSUpSQkKBp06bp3Llzeuutt9SzZ0999913uuWWW/SLX/xCzZo106xZs5y3DWJiYq46x/n5+Tpx4oTPsqioKO3du1efffaZhg8frlatWikrK0vvvPOOkpOTlZmZqbi4OJ9tXn75ZXk8Hj377LMqLCyUx+PRmjVrlJKSom7dumnq1Klyu92aO3eu7r33Xn355Zfq3r37VccH3DQMgKuaO3eukWRdAgICTGpqqs+6n332mZFkZs6c6bP8oYceMi6Xy/z444/Osueff9643W6zfv16M3/+fCPJvPHGGz7bjR492kgy//qv/+os83q95v777zcej8ccP37cWS7JTJ061fn5wQcfNB6Px+zZs8dZduTIEdOwYUPTu3dvZ1npba9du7ZC89G1a1cTHR1tTp486SzbunWrcbvdZtSoUc6ytWvXGklm/vz5V91n6brlXfbt22fOnz9vSkpKfLbZt2+fCQgIMDNmzLD2k5CQYM6ePess93q9pk2bNmbgwIHG6/U6y8+ePWtatWplBgwYUKFjB24WvMUAXIPf//73WrlypVauXKkPPvhAffv21WOPPaZPPvnEWWfJkiXy8/PTU0895bPtpEmTZIzxOeth2rRp6tixo0aPHq0nn3xSycnJ1nalJkyY4PzZ5XJpwoQJKioq0qpVq8pdv6SkRCtWrNCDDz6ohIQEZ3nTpk318MMP66uvvnJedr8WR48eVXp6usaMGaOoqChneefOnTVgwAAtWbLkmvdZ1ksvveTMceklNjZWAQEBzmcISkpKdPLkSYWGhqpdu3b67rvvrP2MHj1aQUFBzs/p6enavXu3Hn74YZ08eVInTpzQiRMnVFBQoH79+mn9+vXyer3XNXbgRsJbDMA16N69u8+HFEeMGKHbb79dEyZM0JAhQ+TxePTTTz8pLi5ODRs29Nm29CX7n376yVnm8Xj03nvv6c4771RgYKDmzp0rl8tl3a7b7fZ5kpektm3bStJlT008fvy4zp49q3bt2lnXtW/f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+eabGh9zXZabmytJioqKkiRt3rxZFy5c8JnfxMREtWjRwmd+O3XqpJiYGGedgQMHKi8vT9u3b6/B0ddtJSUlmjdvngoKCtSjRw/mtgqNHz9e999/v89cSvz9rQq7d+9WXFycEhISNHLkSB04cEBS/Z/bSv+ypqp24sQJlZSU+EySJMXExGjnzp21NKobw7FjxySp3Lktve7YsWOKjo72ud7f319RUVHOOrj4W0wnTpyonj176rbbbpN0ce48Ho8iIiJ81r10fsub/9LrbnYZGRnq0aOHzp8/r9DQUH366afq0KGD0tPTmdsqMG/ePH333Xf69ttvrev4+3t9kpKSlJqaqnbt2uno0aOaPn26evXqpW3bttX7ua0zgQDUB+PHj9e2bdv01Vdf1fZQbijt2rVTenq6cnNztWDBAo0ePVrr1q2r7WHdEA4ePKinn35aK1euVGBgYG0P54aTkpLi/Llz585KSkpSy5Yt9Ze//EVBQUG1OLLrV2feYmjcuLH8/PysT3dmZWUpNja2lkZ1YyidvyvNbWxsrLKzs32uLy4uVk5ODvP/NxMmTNAXX3yhtWvX+vyq89jYWBUVFen06dM+6186v+XNf+l1NzuPx6PWrVurW7dumj17trp06aI5c+Ywt1Vg8+bNys7O1t/93d/J399f/v7+Wrdund588035+/srJiaGOa5CERERatu2rX788cd6//e3zgSCx+NRt27dtHr1ameZ1+vV6tWr1aNHj1ocWf3XqlUrxcbG+sxtXl6evvnmG2due/ToodOnT2vz5s3OOmvWrJHX61VSUlKNj7kuMcZowoQJ+vTTT7VmzRq1atXK5/pu3bqpQYMGPvO7a9cuHThwwGd+MzIyfCJs5cqVCgsLU4cOHWrmQOoRr9erwsJC5rYK9OvXTxkZGUpPT3cud9xxh0aOHOn8mTmuOmfOnNGePXvUtGnT+v/3t1Y/InmJefPmmYCAAJOammoyMzPNv/zLv5iIiAifT3eifPn5+WbLli1my5YtRpJ57bXXzJYtW8xPP/1kjLl4mmNERIT5/PPPzffff28eeOCBck9zvP32280333xjvvrqK9OmTRtOczTGPPHEEyY8PNykpaX5nMp09uxZZ53HH3/ctGjRwqxZs8b89a9/NT169DA9evRwri89lem+++4z6enpZtmyZaZJkyZ14lSm2vbcc8+ZdevWmX379pnvv//ePPfcc8blcpkVK1YYY5jb6lD2LAZjmOPrMWnSJJOWlmb27dtnvv76a9O/f3/TuHFjk52dbYyp33NbpwLBGGPeeust06JFC+PxeEz37t3Nxo0ba3tI9cLatWuNJOsyevRoY8zFUx1ffPFFExMTYwICAky/fv3Mrl27fPZx8uRJM2LECBMaGmrCwsLM2LFjTX5+fi0cTd1S3rxKMnPnznXWOXfunHnyySdNZGSkCQ4ONn//939vjh496rOf/fv3m5SUFBMUFGQaN25sJk2aZC5cuFDDR1P3PProo6Zly5bG4/GYJk2amH79+jlxYAxzWx0uDQTmuPJ+/vOfm6ZNmxqPx2OaNWtmfv7zn5sff/zRub4+zy2/7hkAAFjqzGcQAABA3UEgAAAAC4EAAAAsBAIAALAQCAAAwEIgAAAAC4EAAAAsBAIAALAQCMBNYMyYMXK5XNblxx9/rO2hAaij+HXPwE1i0KBBmjt3rs+yJk2aXNM+SkpK5HK55HbzbwvgRsejHLhJBAQEKDY21ucyZ84cderUSSEhIYqPj9eTTz6pM2fOONukpqYqIiJCCxcuVIcOHRQQEKADBw6osLBQzz77rJo1a6aQkBAlJSUpLS2t9g4OQJUjEICbmNvt1ptvvqnt27fr/fff15o1a/SrX/3KZ52zZ8/qlVde0bvvvqvt27crOjpaEyZM0IYNGzRv3jx9//33Gj58uAYNGqTdu3fX0pEAqGr8sibgJjBmzBh98MEHCgwMdJalpKRo/vz5PustWLBAjz/+uE6cOCHp4isIY8eOVXp6urp06SJJOnDggBISEnTgwAHFxcU52/bv31/du3fXrFmzauCIAFQ3PoMA3CT69u2rt99+2/k5JCREq1at0uzZs7Vz507l5eWpuLhY58+f19mzZxUcHCxJ8ng86ty5s7NdRkaGSkpK1LZtW5/9FxYWqlGjRjVzMACqHYEA3CRCQkLUunVr5+f9+/dryJAheuKJJ/Qf//EfioqK0ldffaVx48apqKjICYSgoCC5XC5nuzNnzsjPz0+bN2+Wn5+fz22EhobWzMEAqHYEAnCT2rx5s7xer/7zP//TOSvhL3/5y1W3u/3221VSUqLs7Gz16tWruocJoJbwIUXgJtW6dWtduHBBb731lvbu3as///nP+u///u+rbte2bVuNHDlSo0aN0ieffKJ9+/Zp06ZNmj17thYvXlwDIwdQEwgE4CbVpUsXvfbaa3rllVd022236cMPP9Ts2bMrtO3cuXM1atQoTZo0Se3atdODDz6ob7/9Vi1atKjmUQOoKZzFAAAALLyCAAAALAQCAACwEAgAAMBCIAAAAAuBAAAALAQCAACwEAgAAMBCIAAAAAuBAAAALAQCAACwEAgAAMBCIAAAAMv/ARlvlWTwJzkNAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***2. Identifying Outliers for Categorical Columns in Test Set***"
      ],
      "metadata": {
        "id": "XLFnVrrCYWMU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Categories with very low or very high frequency than the other categories can be considered as outliers in the categorical data\n",
        "#Name and Ticket columns are not considered as they have many unique values and making their visualization can be impractical in count plots\n",
        "#Categorical columns of the Test set\n",
        "\n",
        "categorical_cols = ['Embarked', 'Pclass', 'Sex']\n",
        "\n",
        "#Defining colors for the count plots\n",
        "\n",
        "colors = ['lime', 'maroon', 'indigo']\n",
        "\n",
        "#Creating count plots for each categorical column\n",
        "\n",
        "for col, color in zip(categorical_cols, colors):\n",
        "  plt.figure(figsize=(8, 5))\n",
        "  sns.countplot(x=test_data[col], color=color)\n",
        "  plt.title(f'Countplot of {col}')\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3bw3wkFFYeo1",
        "outputId": "38fb8c26-8a29-4a94-a1dc-510c2a67c448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAHWCAYAAABt3aEVAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAtYUlEQVR4nO3deXgUdZ7H8U8HSAgknQNykCUJ9yXnhMMoAkIkBERBvFhWg1yKCQjxYLMzcjobZVVQHg4ZuTxQBxw8ANEsR1DkdtERlQUmAvNAQgZykAhJILV/zEPtNAEkTaA7v3m/nqefx676deVbPJPhbVmpOCzLsgQAAAAYwMfTAwAAAADVhbgFAACAMYhbAAAAGIO4BQAAgDGIWwAAABiDuAUAAIAxiFsAAAAYg7gFAACAMYhbAAAAGIO4BQAv0qdPH/Xp08fTY7jIzc3V/fffrwYNGsjhcGju3Lk35et6458FAO9H3AKoEQ4fPqzHH39czZo1U926deV0OnX77bfrtdde09mzZz09niRpwYIFWr58uUe+9i+//KLp06dry5Yt1X7syZMn6/PPP1d6errefvttDRgw4IprHQ6H/fLx8VFUVJT69+9/Q+YCgMup7ekBAODXrFu3Tg888ID8/Pz06KOPqn379iorK9NXX32lZ599Vvv379fixYs9PaYWLFighg0bauTIkTf9a//yyy+aMWOGJFX71c5Nmzbp3nvv1TPPPHNN6++66y49+uijsixL2dnZWrBggfr27at169YpKSmpWmcDgEsRtwC8WnZ2th5++GHFxsZq06ZNatSokb0vJSVFhw4d0rp16zw4oflOnjyp4ODga17fqlUr/du//Zv9fujQoerYsaPmzp1L3AK44bgtAYBXmz17toqLi7VkyRKXsL2oRYsWeuqpp+z358+f16xZs9S8eXP5+fmpSZMm+o//+A+Vlpa6fM7hcGj69OmVjtekSROXK6/Lly+Xw+HQtm3blJaWprCwMNWvX19Dhw5VXl6ey+f279+vrKws+z/LX7yCevEYW7du1eOPP64GDRrI6XTq0UcfVX5+/q/+GZw8eVKjR49WRESE6tatq06dOmnFihX2/p9//llhYWGSpBkzZthf/3Ln94/+8pe/6IEHHlBoaKjq1aunW2+91eVfFC7ObVmW5s+fbx+3qjp06KCGDRsqOzvbZfs777yj7t27q169egoJCVGvXr30xRdfXPE4ZWVlmjp1quLi4hQUFKT69evrjjvu0ObNmyutff/99xUXF6fAwEA5nU516NBBr732mr2/vLxcM2bMUMuWLVW3bl01aNBAPXv2VGZmZpXPD4B34cotAK/26aefqlmzZrrtttuuaf2YMWO0YsUK3X///Xr66ae1c+dOZWRk6Mcff9SaNWvcnmPChAkKCQnRtGnT9PPPP2vu3LlKTU3VBx98IEmaO3euJkyYoICAAP32t7+VJEVERLgcIzU1VcHBwZo+fboOHDighQsX6siRI9qyZcsVo/Hs2bPq06ePDh06pNTUVDVt2lSrVq3SyJEjVVBQoKeeekphYWFauHChxo8fr6FDh+q+++6TJHXs2PGK55Obm6vbbrtNv/zyiyZOnKgGDRpoxYoVuueee7R69WoNHTpUvXr10ttvv61HHnnEvtXAHfn5+crPz1eLFi3sbTNmzND06dN12223aebMmfL19dXOnTu1adMm9e/f/7LHKSoq0ptvvqnhw4dr7NixOnPmjJYsWaLExETt2rVLnTt3liRlZmZq+PDh6tevn1566SVJ0o8//qht27bZ/yI0ffp0ZWRkaMyYMerevbuKioq0Z88effPNN7rrrrvcOk8AXsICAC9VWFhoSbLuvffea1q/b98+S5I1ZswYl+3PPPOMJcnatGmTvU2SNW3atErHiI2NtZKTk+33y5YtsyRZCQkJVkVFhb198uTJVq1atayCggJ72y233GL17t270jEvHiMuLs4qKyuzt8+ePduSZH388cf2tt69e7scY+7cuZYk65133rG3lZWVWfHx8VZAQIBVVFRkWZZl5eXlXfGcLmfSpEmWJOvLL7+0t505c8Zq2rSp1aRJE+vChQv2dklWSkrKNR1XkjV69GgrLy/POnnypLVz506rX79+liTrlVdesSzLsg4ePGj5+PhYQ4cOdfk6lmW5/Blf+mdx/vx5q7S01GV9fn6+FRERYY0aNcre9tRTT1lOp9M6f/78Fefs1KmTNWjQoGs6JwA1C7clAPBaRUVFkqTAwMBrWr9+/XpJUlpamsv2p59+WpKu697ccePGuVxdveOOO3ThwgUdOXKkSseoU6eO/X78+PGqXbu2PfflrF+/XpGRkRo+fLi9rU6dOpo4caKKi4uVlZVVxTP5/+N2795dPXv2tLcFBARo3Lhx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48ePV8OGDRUZGSmHw2HvczgcxC0AAAA8wq24feGFF/T73/9eU6ZMqe55AAAAALe59Zzb/Px8PfDAA9U9CwAAAHBd3IrbBx54QF988UV1zwIAAABcF7duS2jRooWef/557dixQx06dFCdOnVc9k+cOLFahgMAAACqwmFZllXVDzVt2vTKB3Q49Je//OW6hrrZioqKFBQUpMLCQjmdTk+PAwBAlU0OCfH0CICLOfn51Xq8a+01t67cZmdnuz0YAAAAcKO4dc8tAAAA4I3cunI7atSoq+5funSpW8MAAAAA18OtuM2/5B6K8vJyff/99yooKFDfvn2rZTAAAACgqtyK2zVr1lTaVlFRofHjx6t58+bXPRQAAADgjmq759bHx0dpaWmaM2dOdR0SAAAAqJJq/YGyw4cP6/z589V5SAAAAOCauXVbQlpamst7y7J04sQJrVu3TsnJydUyGAAAAFBVbsXt//zP/7i89/HxUVhYmF555ZVffZICAAAAcKO4FbebN2+u7jkAAACA6+ZW3F6Ul5enAwcOSJJat26tsLCwahkKAAAAcIdbP1BWUlKiUaNGqVGjRurVq5d69eqlqKgojR49Wr/88kt1zwgAAABcE7fiNi0tTVlZWfr0009VUFCggoICffzxx8rKytLTTz9d3TMCAAAA18St2xI+/PBDrV69Wn369LG3DRw4UP7+/nrwwQe1cOHC6poPAAAAuGZuXbn95ZdfFBERUWl7eHg4tyUAAADAY9yK2/j4eE2bNk3nzp2zt509e1YzZsxQfHx8tQ0HAAAAVIVbtyXMnTtXAwYMUOPGjdWpUydJ0rfffis/Pz998cUX1TpgTTU5JMTTIwCVzMnP9/QIAADcUG7FbYcOHXTw4EG9++67+umnnyRJw4cP14gRI+Tv71+tAwIAAADXyq24zcjIUEREhMaOHeuyfenSpcrLy9OUKVOqZTgAAACgKty65/aNN95QmzZtKm2/5ZZbtGjRouseCgAAAHCHW3Gbk5OjRo0aVdoeFhamEydOXPdQAAAAgDvcitvo6Ght27at0vZt27YpKirquocCAAAA3OHWPbdjx47VpEmTVF5err59+0qSNm7cqOeee47fUAYAAACPcStun332WZ06dUpPPvmkysrKJEl169bVlClTlJ6eXq0DAgAAANfKrdsSHA6HXnrpJeXl5WnHjh369ttv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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ***3. Handling Outliers in Test Set using IQR method***"
      ],
      "metadata": {
        "id": "Grig2FjwctCE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Numerical columns of Test Set\n",
        "\n",
        "numerical_cols = ['Age', 'Fare', 'SibSp', 'Parch']\n",
        "\n",
        "#Calculating the IQR for each numerical column\n",
        "#Q1 represents first quartile and Q3 represents third quartile\n",
        "\n",
        "Q1 = test_data[numerical_cols].quantile(0.25)\n",
        "Q3 = test_data[numerical_cols].quantile(0.75)\n",
        "IQR = Q3-Q1\n",
        "\n",
        "#lower and upper bounds for the outliers\n",
        "#data points that falls below lower bound and exceeds upper bounds is said to be an outlier\n",
        "\n",
        "lower_bound = Q1-1.5*IQR\n",
        "upper_bound = Q3+1.5*IQR\n",
        "\n",
        "# Removing outliers from numerical columns and displaying the cleaned training set\n",
        "\n",
        "print(\"Cleaned Test Set:\\n\")\n",
        "for col in numerical_cols:\n",
        "  cleaned_test_data = test_data[(test_data[col] >= lower_bound[col]) & (test_data[col] <= upper_bound[col])]\n",
        "cleaned_test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "L_QK_MeTfFz-",
        "outputId": "4a67027e-3975-431d-863e-93c6b33afd1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cleaned Test Set:\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     PassengerId  Pclass                              Name     Sex   Age  \\\n",
              "0            892       3                  Kelly, Mr. James    male  34.5   \n",
              "1            893       3  Wilkes, Mrs. James (Ellen Needs)  female  47.0   \n",
              "3            895       3                  Wirz, Mr. Albert    male  27.0   \n",
              "5            897       3        Svensson, Mr. Johan Cervin    male  14.0   \n",
              "6            898       3              Connolly, Miss. Kate  female  30.0   \n",
              "..           ...     ...                               ...     ...   ...   \n",
              "410         1302       3            Naughton, Miss. Hannah  female  27.0   \n",
              "412         1304       3    Henriksson, Miss. Jenny Lovisa  female  28.0   \n",
              "413         1305       3                Spector, Mr. Woolf    male  27.0   \n",
              "415         1307       3      Saether, Mr. Simon Sivertsen    male  38.5   \n",
              "416         1308       3               Ware, Mr. Frederick    male  27.0   \n",
              "\n",
              "     SibSp  Parch              Ticket    Fare Embarked  \n",
              "0        0      0              330911  7.8292        Q  \n",
              "1        1      0              363272  7.0000        S  \n",
              "3        0      0              315154  8.6625        S  \n",
              "5        0      0                7538  9.2250        S  \n",
              "6        0      0              330972  7.6292        Q  \n",
              "..     ...    ...                 ...     ...      ...  \n",
              "410      0      0              365237  7.7500        Q  \n",
              "412      0      0              347086  7.7750        S  \n",
              "413      0      0           A.5. 3236  8.0500        S  \n",
              "415      0      0  SOTON/O.Q. 3101262  7.2500        S  \n",
              "416      0      0              359309  8.0500        S  \n",
              "\n",
              "[280 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ecf69692-81a3-474e-9f4d-c71388a741c6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>892</td>\n",
              "      <td>3</td>\n",
              "      <td>Kelly, Mr. James</td>\n",
              "      <td>male</td>\n",
              "      <td>34.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330911</td>\n",
              "      <td>7.8292</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>893</td>\n",
              "      <td>3</td>\n",
              "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
              "      <td>female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>363272</td>\n",
              "      <td>7.0000</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>895</td>\n",
              "      <td>3</td>\n",
              "      <td>Wirz, Mr. Albert</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>315154</td>\n",
              "      <td>8.6625</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>897</td>\n",
              "      <td>3</td>\n",
              "      <td>Svensson, Mr. Johan Cervin</td>\n",
              "      <td>male</td>\n",
              "      <td>14.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7538</td>\n",
              "      <td>9.2250</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>898</td>\n",
              "      <td>3</td>\n",
              "      <td>Connolly, Miss. Kate</td>\n",
              "      <td>female</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>330972</td>\n",
              "      <td>7.6292</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>410</th>\n",
              "      <td>1302</td>\n",
              "      <td>3</td>\n",
              "      <td>Naughton, Miss. Hannah</td>\n",
              "      <td>female</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>365237</td>\n",
              "      <td>7.7500</td>\n",
              "      <td>Q</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>412</th>\n",
              "      <td>1304</td>\n",
              "      <td>3</td>\n",
              "      <td>Henriksson, Miss. Jenny Lovisa</td>\n",
              "      <td>female</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>347086</td>\n",
              "      <td>7.7750</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>1305</td>\n",
              "      <td>3</td>\n",
              "      <td>Spector, Mr. Woolf</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>A.5. 3236</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>415</th>\n",
              "      <td>1307</td>\n",
              "      <td>3</td>\n",
              "      <td>Saether, Mr. Simon Sivertsen</td>\n",
              "      <td>male</td>\n",
              "      <td>38.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>SOTON/O.Q. 3101262</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>416</th>\n",
              "      <td>1308</td>\n",
              "      <td>3</td>\n",
              "      <td>Ware, Mr. Frederick</td>\n",
              "      <td>male</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>359309</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>280 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ecf69692-81a3-474e-9f4d-c71388a741c6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ecf69692-81a3-474e-9f4d-c71388a741c6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ecf69692-81a3-474e-9f4d-c71388a741c6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e682b068-e625-4b9f-8ddb-1a4c3ff865a3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e682b068-e625-4b9f-8ddb-1a4c3ff865a3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e682b068-e625-4b9f-8ddb-1a4c3ff865a3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1b60e27f-6a28-45b1-af02-d7a13ede18b7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cleaned_test_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1b60e27f-6a28-45b1-af02-d7a13ede18b7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cleaned_test_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cleaned_test_data",
              "summary": "{\n  \"name\": \"cleaned_test_data\",\n  \"rows\": 280,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120,\n        \"min\": 892,\n        \"max\": 1308,\n        \"num_unique_values\": 280,\n        \"samples\": [\n          938,\n          1040,\n          1241\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 280,\n        \"samples\": [\n          \"Chevre, Mr. Paul Romaine\",\n          \"Crafton, Mr. John Bertram\",\n          \"Walcroft, Miss. Nellie\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.737781897236191,\n        \"min\": 12.0,\n        \"max\": 53.0,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          28.0,\n          19.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 270,\n        \"samples\": [\n          \"237249\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.617797097789339,\n        \"min\": 0.0,\n        \"max\": 65.0,\n        \"num_unique_values\": 97,\n        \"samples\": [\n          50.4958\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    }
  ]
}
